generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Destination {
  id       String         @id @default(cuid())
  name     String         @unique
  type     DestinaionType @default(NATIONAL)
  imageUrl String
  tours    Tour[]         @relation("TourDestinations")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  imageUrl    String
  tours       Tour[]  @relation("CategoryTours")
}

model Nature {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  imageUrl    String
  tours       Tour[]  @relation("NatureTours")
}

model Landing {
  id            String  @id @default(cuid())
  navbar        Boolean @default(true)
  hero          Boolean @default(true)
  national      Boolean @default(true)
  international Boolean @default(true)
  mesure        Boolean @default(true)
  reviews       Boolean @default(true)
  meeting       Boolean @default(true)
  expert        Boolean @default(true)
  trust         Boolean @default(true)
  footer        Boolean @default(true)
  search        Boolean @default(true)
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  category    String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Program {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  tourId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tour        Tour     @relation("TourPrograms", fields: [tourId], references: [id], onDelete: Cascade)
}

model Service {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  tours       Tour[]  @relation("TourServices")
}

model Hotel {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float
  reservation Reservation[]
  tours       Tour[]        @relation("HotelTours")
}

model Tour {
  id                String        @id 
  title             String
  description       String?
  type              TravelType    @default(NATIONAL)
  priceOriginal     Int?
  priceDiscounted   Int?
  durationDays      Int?
  durationNights    Int?
  imageUrl          String?
  groupType         String?
  groupSizeMax      Int?
  showReviews       Boolean       @default(true)
  showDifficulty    Boolean       @default(true)
  showDiscount      Boolean       @default(true)
  difficultyLevel   Int?
  totalReviews      Int           @default(0)
  averageRating     Float         @default(0.0)
  discountPercent   Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  dateCard          String?
  accommodationType String?
  exclus            String?
  inclus            String?
  advancedPrice     Int?
  googleMapsUrl     String?
  videoUrl          String?
  active            Boolean       @default(true)
  discountEndDate   DateTime?
  images            File[]
  programs          Program[]     @relation("TourPrograms")
  reviews           Review[]
  dates             TourDate[]
  reservation       Reservation[]
  categories        Category[]    @relation("CategoryTours")
  hotels            Hotel[]       @relation("HotelTours")
  natures           Nature[]      @relation("NatureTours")
  destinations      Destination[] @relation("TourDestinations")
  services          Service[]     @relation("TourServices")
}

model File {
  id        Int      @id @default(autoincrement())
  tourId    String
  url       String
  createdAt DateTime @default(now())
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              String   @id @default(cuid())
  tourId          String
  hotelId         String?
  travelDateId    String  
  fullName        String
  email           String
  phone           String
  adultCount      Int
  childCount      Int
  infantCount     Int
  singleRoom      Boolean  @default(false)
  specialRequests String?
  totalPrice      Float
  termsAccepted   Boolean  @default(false)
  status          ReservationStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  travelDate      TourDate @relation(fields: [travelDateId], references: [id])
  hotel           Hotel?    @relation(fields: [hotelId], references: [id])
  tour            Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
}


model Review {
  id        String   @id @default(cuid())
  fullName  String
  message   String
  rating    Int      @default(5)
  status    Boolean  @default(false)
  tourId    String
  createdAt DateTime @default(now())
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model TourDate {
  id          String    @id @default(cuid())
  tourId      String
  startDate   DateTime?
  endDate     DateTime?
  description String?
  tour        Tour      @relation(fields: [tourId], references: [id])

  Reservation Reservation[]
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  archive          Boolean         @default(false)
  createdAt        DateTime        @default(now())
  emailVerified    DateTime?
  image            String?
  password         String?
  prenom           String?
  qrSecret         String?
  role             Role            @default(USER)
  statut           Boolean         @default(true)
  twoFactorEnabled Boolean         @default(true)
  twoFactorSecret  String?
  updatedAt        DateTime        @updatedAt
  username         String          @unique
  verified_email   String?
  accounts         Account[]
  Authenticator    Authenticator[]
  sessions         Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  USER
  ADMIN
}

enum TravelType {
  NATIONAL
  INTERNATIONAL
  EN_MESURE
}

enum DestinaionType {
  NATIONAL
  INTERNATIONAL
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}