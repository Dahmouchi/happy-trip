// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TravelType {
  NATIONAL
  INTERNATIONAL
  EN_MESURE
}

model Tour {
  id              String     @id @default(cuid())
  title           String
  description     String?
  type            TravelType @default(NATIONAL)
  location        String?
  priceOriginal   Int?
  priceDiscounted Int?
  startDate       DateTime?
  endDate         DateTime?
  durationDays    Int?
  durationNights  Int?
  accommodation   String?
  imageUrl        String?

  groupType    String? // e.g., "Petit groupe"
  groupSizeMax Int? // e.g., 12

  showReviews    Boolean @default(true)
  showDifficulty Boolean @default(true)
  showDiscount   Boolean @default(true)

  difficultyLevel Int? // 1 to 5
  totalReviews    Int     @default(0)
  averageRating   Float   @default(0.0)
  discountPercent Int? // e.g. 10 for 10%
  weekendsOnly    Boolean @default(false)

  dates TourDate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  VacationStyle VacationStyle[] @relation("TourVacationStyles")
}

model VacationStyle {
  id    String @id @default(cuid())
  name  String @unique // e.g., "Voyage en groupe", "Voyage sur mesure"
  tours Tour[] @relation("TourVacationStyles")
}

model TourDate {
  id     String @id @default(cuid())
  tour   Tour   @relation(fields: [tourId], references: [id])
  tourId String

  startDate DateTime
  endDate   DateTime
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  archive          Boolean         @default(false)
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  prenom           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  username         String          @unique
  password         String?
  statut           Boolean         @default(true)
  role             Role            @default(USER)
  verified_email   String?
  qrSecret         String?
  twoFactorEnabled Boolean         @default(true)
  twoFactorSecret  String? // Secret for TOTP
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
